{"version":3,"sources":["api.ts","atoms.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","isDarkAtom","atom","key","default","Container","styled","div","props","theme","textColor","HeaderChart","span","Chart","coinId","isDark","useRecoilValue","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","type","series","name","map","price","x","time_close","y","open","high","low","close","options","chart","height","width","toolbar","show","mode","grid","yaxis","xaxis","axisBorder","offsetX","plotOptions","candlestick","colors","upward","downward","HeaderPrice","Titlebox","Title","Price","tickersData","useState","setData","setLoading","useEffect","rank","quotes","USD","toFixed","ath_price","percent_change_12h","h1","accentColor","Loader","Header","header","Overview","OverviewItem","Description","p","Tabs","Button","button","bgColor","Tab","isActive","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","loading","Helmet","style","display","justifyContent","alignItems","textAlign","to","border","symbol","description","total_supply","max_supply","path","CoinsList","ul","li","Img","img","Coins","setDarkAtom","useSetRecoilState","onClick","prev","slice","coin","pathname","id","src","toLowerCase","Router","darktheme","lighttheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.203542d2.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinTickers(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinHistory(coinId: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((response) => response.json());\n}\n","import { atom } from \"recoil\";\n\nexport const isDarkAtom = atom({\n  key: \"isDark\",\n  default: true,\n});\n","import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport styled from \"styled-components\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"../atoms\";\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface CharProps {\n  coinId: string;\n}\n\nconst Container = styled.div`\n  display: block;\n  color: ${(props) => props.theme.textColor};\n`;\n\nconst HeaderChart = styled.span`\n  font-size: 26px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 20px 0;\n  color: ${(props) => props.theme.textColor};\n`;\n\nfunction Chart({ coinId }: CharProps) {\n  const isDark = useRecoilValue(isDarkAtom);\n\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId),\n    {\n      refetchInterval: 10000,\n    }\n  );\n\n  return (\n    <Container>\n      <HeaderChart>Chart</HeaderChart>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          series={[\n            {\n              name: \"price\",\n              data: data?.map((price) => ({\n                x: price.time_close,\n                y: [price.open, price.high, price.low, price.close],\n              })),\n            },\n          ]}\n          options={{\n            chart: {\n              height: 150,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n            },\n            theme: {\n              mode: isDark ? \"dark\" : \"light\",\n            },\n            grid: { show: false },\n            yaxis: {\n              show: false,\n            },\n            xaxis: {\n              type: \"datetime\",\n              axisBorder: {\n                offsetX: 13,\n              },\n            },\n            plotOptions: {\n              candlestick: {\n                colors: {\n                  upward: \"#097df8\",\n                  downward: \"#f70d04\",\n                },\n              },\n            },\n          }}\n        />\n      )}\n    </Container>\n  );\n}\n\nexport default Chart;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: block;\n  color: ${(props) => props.theme.textColor};\n`;\n\nconst HeaderPrice = styled.span`\n  font-size: 26px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 20px 0;\n  color: ${(props) => props.theme.textColor};\n`;\n\nconst Titlebox = styled.div`\n  display: flex;\n  background-color: transparent;\n  padding: 20px 0;\n  font-size: 20px;\n  border-radius: 5%;\n  justify-content: space-between;\n`;\n\nconst Title = styled.span`\n  span {\n    color: green;\n    margin-left: 5px;\n  }\n`;\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\ninterface PriceProps {\n  coinId: string;\n  tickersData?: PriceData;\n}\n\nfunction Price({ coinId, tickersData }: PriceProps) {\n  const [data, setData] = useState<PriceData>();\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    setData(tickersData);\n    setLoading(false);\n  }, [coinId, tickersData]);\n\n  return (\n    <Container>\n      <HeaderPrice>Price</HeaderPrice>\n      {isLoading ? (\n        \"Loading price...\"\n      ) : (\n        <>\n          <Titlebox>\n            <span>Rank:</span>\n            <Title>{data?.rank}</Title>\n          </Titlebox>\n\n          <Titlebox>\n            <span>Price:</span>\n            <Title>\n              {data?.quotes.USD.price.toFixed(3)}\n              <span>$</span>\n            </Title>\n          </Titlebox>\n\n          <Titlebox>\n            <span>ATH-Price:</span>\n            <Title>\n              {data?.quotes.USD.ath_price.toFixed(3)}\n              <span>$</span>\n            </Title>\n          </Titlebox>\n\n          <Titlebox>\n            <span>Change rate (last 12 hours):</span>\n            <Title>\n              {data?.quotes.USD.percent_change_12h.toFixed(3)}\n              <span>$</span>\n            </Title>\n          </Titlebox>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default Price;\n","import {\n  Switch,\n  Route,\n  useLocation,\n  useParams,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\nimport styled from \"styled-components\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n  overflow: hidden;\n`;\n\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: ${(props) => props.theme.accentColor};\n  padding: 10px 20px;\n  border-radius: 10px;\n  margin-bottom: 30px;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Button = styled.button`\n  width: 60px;\n  height: 60px;\n  font-size: 18px;\n  padding: 0px;\n  margin: 0px;\n  background-color: ${(props) => props.theme.bgColor};\n  border-radius: 50%;\n  color: ${(props) => props.theme.accentColor};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Tab = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 7px 0px;\n  border-radius: 10px;\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    display: block;\n  }\n`;\n\ninterface RouteParams {\n  coinId: string;\n}\ninterface RouteState {\n  name: string;\n}\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nfunction Coin() {\n  const { coinId } = useParams<RouteParams>();\n  const { state } = useLocation<RouteState>();\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId)\n  );\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId),\n    {\n      refetchInterval: 5000,\n    }\n  );\n  const loading = infoLoading || tickersLoading;\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n\n      <Header>\n        <Button>\n          <Link\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              textAlign: \"center\",\n            }}\n            to={\"/\"}\n          >\n            ←\n          </Link>\n        </Button>\n\n        <Title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </Title>\n        <Button style={{ border: \"none\" }}></Button>\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Pirce:</span>\n              <span>{tickersData?.quotes.USD.price}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n            </Tab>\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n\n          <Switch>\n            <Route path={`/:coinId/price`}>\n              <Price coinId={coinId} tickersData={tickersData} />\n            </Route>\n            <Route path={`/:coinId/chart`}>\n              <Chart coinId={coinId} />\n            </Route>\n          </Switch>\n        </>\n      )}\n    </Container>\n  );\n}\nexport default Coin;\n","import { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\nimport { useSetRecoilState } from \"recoil\";\nimport { isDarkAtom } from \"../atoms\";\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 40px auto;\n`;\nconst Header = styled.header`\n  height: 10vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst CoinsList = styled.ul``;\nconst Coin = styled.li`\n  background-color: ${(props) => props.theme.accentColor};\n  color: ${(props) => props.theme.bgColor};\n  border-radius: 15px;\n  margin-bottom: 10px;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.5s ease-in;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n  margin-bottom: 20px;\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface Icoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nfunction Coins() {\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\n  const { isLoading, data } = useQuery<Icoin[]>(\"allCoins\", fetchCoins);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n\n      <Header>\n        <Title>코인</Title>\n        <button onClick={toggleDarkAtom}>toggle</button>\n      </Header>\n      {isLoading ? (\n        <Loader>Loding...</Loader>\n      ) : (\n        <CoinsList>\n          {data?.slice(0, 100).map((coin) => (\n            <Coin key={coin.id}>\n              <Link\n                to={{\n                  pathname: `/${coin.id}`,\n                  state: { name: coin.name },\n                }}\n              >\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n}\nexport default Coins;\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Coin from \"./routes/Coin\";\nimport Coins from \"./routes/Coins\";\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/:coinId\">\n          <Coin />\n        </Route>\n        <Route path=\"/\">\n          <Coins />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darktheme: DefaultTheme = {\n  bgColor: \"#2c3e50\",\n  textColor: \"#95a5a6\",\n  accentColor: \"#bdc3c7\",\n};\n\nexport const lighttheme: DefaultTheme = {\n  bgColor: \"white\",\n  textColor: \"black\",\n  accentColor: \"#8c7ae6\",\n};\n\nexport const theme = {\n  lighttheme,\n  darktheme,\n};\n\nexport default theme;\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\nimport { lighttheme, darktheme } from \"./theme\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor}\n}\na {\n  text-decoration:none;\n  color: inherit;\n}\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darktheme : lighttheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}